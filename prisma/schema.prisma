generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String           @id
  name           String?
  email          String?          @unique
  username       String?          @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  about          String?
  location       String?
  github         String?
  twitter        String?
  linkden        String?
  accounts       Account[]
  Comment        Comment[]
  Favorite       Favorite[]
  Rating         Rating[]
  RecentlyViewed RecentlyViewed[]
  sessions       Session[]
  WatchTogether  WatchTogether[]
  Chat           Chat[]
}

model Rating {
  id       String @id
  object   String
  upVote   Int?
  downVote Int?
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([object, userId])
}

model Comment {
  id            String          @id @default(uuid())
  content       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  parentId      String?
  postId        String
  parent        Comment?        @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[]       @relation("CommentReplies")
  user          User            @relation(fields: [userId], references: [id])
  MovieComment  MovieComment[]
  SeriesComment SeriesComment[]

  @@index([postId])
}

model MovieComment {
  id        String  @id
  movieId   String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
}

model Favorite {
  id          String @id
  userId      String
  mediaId     String
  MediaType   String
  title       String
  poster_path String
  user        User   @relation(fields: [userId], references: [id])
}

model SeriesComment {
  id        String  @id
  seriesId  String
  seasonId  String
  episodeId String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
}

model RecentlyViewed {
  id          String   @id
  mediaId     String
  MediaType   String
  userId      String
  poster_path String
  title       String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model WatchTogether {
  id              String @id
  userId          String
  mediaId         String
  roomId          String
  noOfParticipant Int
  MediaType       String
  User            User   @relation(fields: [userId], references: [id])
}

model Chat{
  id       String   @id
  userId   String
  roomId   String
  message  String
  createdAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}
